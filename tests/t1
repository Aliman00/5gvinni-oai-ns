#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import sys
from ipaddress import IPv4Address, IPv4Interface, IPv6Address, IPv6Interface


# ###### Dummy function #####################################################
def clear_flag(flag):
   # Nothing to do!
   pass


# ###### Dummy function #####################################################
def set_flag(flag):
   # Nothing to do!
   pass


# ###### Execute command ####################################################
def execute(commands):
   sys.stdout.write('-----------------------------------------------------------------------------\n')
   sys.stdout.write('time bash -c "' + commands + '"\n')
   return True


# ######  Get /etc/network/interfaces setup for interface ###################
def configureInterface(name,
                       ipv4Interface = IPv4Interface('0.0.0.0/0'), ipv4Gateway = None,
                       ipv6Interface = None,                       ipv6Gateway = None,
                       metric = 1):

   # NOTE:
   # Double escaping is required for \ and " in "configuration" string!
   # 1. Python
   # 2. bash -c "<command>"
   # That is: $ => \$ ; \ => \\ ; " => \\\"

   configuration = 'auto ' + name + '\\\\n'

   # ====== IPv4 ============================================================
   if ipv4Interface == IPv4Interface('0.0.0.0/0'):
      configuration = configuration + 'iface ' + name + ' inet dhcp'
   else:
      configuration = configuration + \
         'iface ' + name + ' inet static\\\\n' + \
         '\\\\taddress ' + str(ipv4Interface.ip)      + '\\\\n' + \
         '\\\\tnetmask ' + str(ipv4Interface.netmask) + '\\\\n'
      if ((ipv4Gateway != None) and (ipv4Gateway != IPv4Address('0.0.0.0'))):
         configuration = configuration + \
            '\\\\tgateway ' + str(ipv4Gateway) + '\\\\n' + \
            '\\\\tmetric '  + str(metric)      + '\\\\n'
      configuration = configuration + '\\\\n'

   # ====== IPv6 ============================================================
   if ipv6Interface == None:
      configuration = configuration + \
         '\\\\niface ' + name + ' inet6 manual\\\\n' + \
         '\\\\tautoconf 0\\\\n'
   elif ipv6Interface == IPv6Interface('::/0'):
      configuration = configuration + \
         '\\\\niface ' + name + ' inet6 dhcp\\\\n' + \
         '\\\\tautoconf 0\\\\n'
   else:
      configuration = configuration + \
         '\\\\niface ' + name + ' inet6 static\\\\n' + \
         '\\\\tautoconf 0\\\\n' + \
         '\\\\taddress ' + str(ipv6Interface.ip)                + '\\\\n' + \
         '\\\\tnetmask ' + str(ipv6Interface.network.prefixlen) + '\\\\n'
      if ((ipv6Gateway != None) and (ipv6Gateway != IPv6Address('::'))):
         configuration = configuration + \
            '\\\\tgateway ' + str(ipv6Gateway) + '\\\\n' + \
            '\\\\tmetric '  + str(metric)      + '\\\\n'

   return configuration




# ###### prepare-cassandra-hss-build function ###############################
# @when('actions.prepare-cassandra-hss-build')
# @when('hsscharm.installed')
def prepare_cassandra_hss_build():

   # ====== Install Cassandra and the HSS ===================================
   # For a documentation of the installation procedure, see:
   # https://github.com/OPENAIRINTERFACE/openair-cn/wiki/OpenAirSoftwareSupport#install-hss

   gitRepository = 'https://github.com/OPENAIRINTERFACE/openair-cn.git'
   gitDirectory  = 'openair-cn'
   gitCommit     = 'develop'

   # Prepare network configurations:
   configurationS6a = configureInterface('ens4', IPv4Interface('0.0.0.0/0'))

   # NOTE:
   # Double escaping is required for \ and " in "command" string!
   # 1. Python
   # 2. bash -c "<command>"
   # That is: $ => \$ ; \ => \\ ; " => \\\"

   commands = """\
echo \\\"###### Preparing system ###############################################\\\" && \\
echo -e \\\"{configurationS6a}\\\" | sudo tee /etc/network/interfaces.d/61-ens4 && sudo ifup ens4 || true && \\
sudo add-apt-repository -y ppa:rmescandon/yq && \\
DEBIAN_FRONTEND=noninteractive sudo apt install -y -o Dpkg::Options::=--force-confold -o Dpkg::Options::=--force-confdef --no-install-recommends yq && \\
echo \\\"###### Preparing sources ##############################################\\\" && \\
cd /home/nornetpp/src && \\
rm -rf {gitDirectory} && \\
git clone {gitRepository} {gitDirectory} && \\
cd {gitDirectory} && \\
git checkout {gitCommit} && \\
cd scripts && \\
mkdir logs""".format(
      gitRepository    = gitRepository,
      gitDirectory     = gitDirectory,
      gitCommit        = gitCommit,
      configurationS6a = configurationS6a
   )

   if execute(commands) == True:
      set_flag('hsscharm.prepared-cassandra-hss-build')
      clear_flag('actions.configure-hss')


# ###### configure-cassandra function #######################################
# @when('actions.configure-cassandra')
# @when('hsscharm.prepared-cassandra-hss-build')
def configure_cassandra():

   # ====== Install Cassandra and the HSS ===================================
   # For a documentation of the installation procedure, see:
   # https://github.com/OPENAIRINTERFACE/openair-cn/wiki/OpenAirSoftwareSupport#install-hss

   gitDirectory      = 'openair-cn'
   cassandraServerIP = '172.16.6.129'

   # NOTE:
   # Double escaping is required for \ and " in "command" string!
   # 1. Python
   # 2. bash -c "<command>"
   # That is: $ => \$ ; \ => \\ ; " => \\\"

   commands = """\
echo \\\"###### Building Cassandra #############################################\\\" && \\
export MAKEFLAGS=\\\"-j`nproc`\\\" && \\
cd /home/nornetpp/src && \\
cd {gitDirectory} && \\
cd scripts && \\
./build_cassandra --check-installed-software --force && \\
sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java && \\
sudo service cassandra stop && \\
sudo rm -rf /var/lib/cassandra/data/system/* && \\
sudo rm -rf /var/lib/cassandra/commitlog/* && \\
sudo rm -rf /var/lib/cassandra/data/system_traces/* && \\
sudo rm -rf /var/lib/cassandra/saved_caches/* && \\
sudo yq w -i /etc/cassandra/cassandra.yaml \\\"cluster_name\\\" \\\"HSS Cluster\\\" && \\
sudo yq w -i /etc/cassandra/cassandra.yaml \\\"seed_provider[0].class_name\\\" \\\"org.apache.cassandra.locator.SimpleSeedProvider\\\" && \\
sudo yq w -i /etc/cassandra/cassandra.yaml \\\"seed_provider[0].parameters[0].seeds\\\" \\\"{cassandraServerIP}\\\" && \\
sudo yq w -i /etc/cassandra/cassandra.yaml \\\"listen_address\\\" \\\"{cassandraServerIP}\\\" && \\
sudo yq w -i /etc/cassandra/cassandra.yaml \\\"rpc_address\\\" \\\"{cassandraServerIP}\\\" && \\
sudo yq w -i /etc/cassandra/cassandra.yaml \\\"endpoint_snitch\\\" \\\"GossipingPropertyFileSnitch\\\" && \\
sudo service cassandra start && \\
sleep 10 && \\
sudo service cassandra status | cat""".format(
      gitDirectory      = gitDirectory,
      cassandraServerIP = cassandraServerIP
   )

   if execute(commands) == True:
      set_flag('hsscharm.configured-cassandra')
      clear_flag('actions.configure-cassandra')


# ###### configure-hss function #############################################
# @when('actions.configure-hss')
# @when('hsscharm.configured-cassandra')
def configure_hss():

   # ====== Install Cassandra and the HSS ===================================
   # For a documentation of the installation procedure, see:
   # https://github.com/OPENAIRINTERFACE/openair-cn/wiki/OpenAirSoftwareSupport#install-hss

   gitDirectory       = 'openair-cn'
   cassandraServerIP  = '172.16.6.129'
   networkRealm       = 'simula.nornet'
   networkLTE_K       = '449c4b91aeacd0ace182cf3a5a72bfa1'
   networkOP_K        = '1006020f0a478bf6b699f15c062e42b3'
   networkIMSIFirst   = '242881234500000'
   networkMSISDNFirst = '24288880000000'
   networkUsers       = 1024

   # NOTE:
   # Double escaping is required for \ and " in "command" string!
   # 1. Python
   # 2. bash -c "<command>"
   # That is: $ => \$ ; \ => \\ ; " => \\\"

   commands = """\
echo \\\"###### Building HSS ###################################################\\\" && \\
export MAKEFLAGS=\\\"-j`nproc`\\\" && \\
cd /home/nornetpp/src && \\
cd {gitDirectory} && \\
cd scripts && \\
./build_hss_rel14 --check-installed-software --force && \\
./build_hss_rel14 --clean && \\
cqlsh --file ../src/hss_rel14/db/oai_db.cql {cassandraServerIP} && \\
./data_provisioning_users --apn default.{networkRealm} --apn2 internet.{networkRealm} --key {networkLTE_K} --imsi-first {networkIMSIFirst} --msisdn-first {networkMSISDNFirst} --mme-identity mme.{networkRealm} --no-of-users {networkUsers} --realm {networkRealm} --truncate True  --verbose True --cassandra-cluster {cassandraServerIP} && \\
./data_provisioning_mme --id 3 --mme-identity mme.{networkRealm} --realm {networkRealm} --ue-reachability 1 --truncate True  --verbose True -C {cassandraServerIP} && \\
echo \\\"###### Creating HSS configuration files ###############################\\\" && \\
openssl rand -out \$HOME/.rnd 128 && \\
echo \\\"====== Configuring Diameter ... ======\\\" && \\
PREFIX='/usr/local/etc/oai' && \\
sudo mkdir -m 0777 -p \$PREFIX && \\
sudo mkdir -m 0777 -p \$PREFIX/freeDiameter && \\
sudo cp ../etc/acl.conf ../etc/hss_rel14_fd.conf \$PREFIX/freeDiameter && \\
sudo cp ../etc/hss_rel14.conf ../etc/hss_rel14.json \$PREFIX && \\
sudo sed -i -e 's/#ListenOn/ListenOn/g' \$PREFIX/freeDiameter/hss_rel14_fd.conf && \\
echo \\\"====== Updating configuration files ... ======\\\" && \\
declare -A HSS_CONF && \\
HSS_CONF[@PREFIX@]=\$PREFIX && \\
HSS_CONF[@REALM@]='{networkRealm}' && \\
HSS_CONF[@HSS_FQDN@]='hss.{networkRealm}' && \\
HSS_CONF[@cassandra_Server_IP@]='{cassandraServerIP}' && \\
HSS_CONF[@cassandra_IP@]='{cassandraServerIP}' && \\
HSS_CONF[@OP_KEY@]='{networkOP_K}' && \\
HSS_CONF[@ROAMING_ALLOWED@]='true' && \\
for K in \\\"\${{!HSS_CONF[@]}}\\\"; do echo \\\"K=\$K ...\\\" && sudo egrep -lRZ \\\"\$K\\\" \$PREFIX | xargs -0 -l sudo sed -i -e \\\"s|\$K|\${{HSS_CONF[\$K]}}|g\\\" ; done && \\
../src/hss_rel14/bin/make_certs.sh hss {networkRealm} \$PREFIX && \\
echo \\\"====== Updating key ... ======\\\" && \\
oai_hss -j \$PREFIX/hss_rel14.json --onlyloadkey""".format(
      gitDirectory       = gitDirectory,
      cassandraServerIP  = cassandraServerIP,
      networkRealm       = networkRealm,
      networkLTE_K       = networkLTE_K,
      networkOP_K        = networkOP_K,
      networkIMSIFirst   = networkIMSIFirst,
      networkMSISDNFirst = networkMSISDNFirst,
      networkUsers       = networkUsers
   )

   if execute(commands) == True:
      set_flag('hsscharm.configured-hss')
      clear_flag('actions.configure-hss')




# ###### configure-mme function #############################################
# @when('actions.configure-mme')
# @when('mmecharm.installed')
def configure_mme():

   # ====== Install MME =====================================================
   # For a documentation of the installation procedure, see:
   # https://github.com/OPENAIRINTERFACE/openair-cn/wiki/OpenAirSoftwareSupport#install-mme

   gitRepository            = 'https://github.com/OPENAIRINTERFACE/openair-cn.git'
   gitDirectory             = 'openair-cn'
   gitCommit                = 'develop'
   cassandraServerIP        = '172.16.6.129'
   networkRealm             = 'simula.nornet'
   networkLTE_K             = '449c4b91aeacd0ace182cf3a5a72bfa1'
   networkOP_K              = '1006020f0a478bf6b699f15c062e42b3'
   networkIMSIFirst         = '242881234500000'
   networkMSISDNFirst       = '24288880000000'
   networkUsers             = 1024
   networkS1C_IPv4Interface = IPv4Interface('192.168.247.102/24')
   networkS1C_IPv4Gateway   = IPv4Address('0.0.0.0')
   networkS1C_IPv6Interface = None
   networkS1C_IPv6Gateway   = None

   # Prepare network configurations:
   configurationS6a = configureInterface('ens4', IPv4Interface('0.0.0.0/0'))
   configurationS11 = configureInterface('ens5', IPv4Interface('0.0.0.0/0'))
   configurationS1C = configureInterface('ens6', networkS1C_IPv4Interface, networkS1C_IPv4Gateway)

   # NOTE:
   # Double escaping is required for \ and " in "command" string!
   # 1. Python
   # 2. bash -c "<command>"
   # That is: $ => \$ ; \ => \\ ; " => \\\"

   commands = """\
echo \\\"###### Preparing system ###############################################\\\" && \\
echo -e \\\"{configurationS6a}\\\" | sudo tee /etc/network/interfaces.d/61-ens4 && sudo ifup ens4 || true && \\
echo -e \\\"{configurationS11}\\\" | sudo tee /etc/network/interfaces.d/62-ens5 && sudo ifup ens5 || true && \\
echo -e \\\"{configurationS1C}\\\" | sudo tee /etc/network/interfaces.d/63-ens6 && sudo ifup ens6 || true && \\
echo \\\"###### Preparing sources ##############################################\\\" && \\
cd /home/nornetpp/src && \\
rm -rf {gitDirectory} && \\
git clone {gitRepository} {gitDirectory} && \\
cd {gitDirectory} && \\
git checkout {gitCommit} && \\
cd scripts && \\
mkdir logs && \\
echo \\\"###### Building MME ####################################################\\\" && \\
./build_mme --check-installed-software --force && \\
./build_mme --clean
""".format(
      gitRepository      = gitRepository,
      gitDirectory       = gitDirectory,
      gitCommit          = gitCommit,
      cassandraServerIP  = cassandraServerIP,
      networkRealm       = networkRealm,
      networkLTE_K       = networkLTE_K,
      networkOP_K        = networkOP_K,
      networkIMSIFirst   = networkIMSIFirst,
      networkMSISDNFirst = networkMSISDNFirst,
      networkUsers       = networkUsers,
      configurationS6a   = configurationS6a,
      configurationS11   = configurationS11,
      configurationS1C   = configurationS1C
   )

   if execute(commands) == True:
      clear_flag('actions.configure-mme')


# ###### configure-spgwu function ###########################################
#@when('actions.configure-spgwu')
#@when('spgwucharm.installed')
def configure_spgwu():

   # ====== Install SPGW-U ==================================================
   # For a documentation of the installation procedure, see:
   # https://github.com/OPENAIRINTERFACE/openair-cn-cups/wiki/OpenAirSoftwareSupport#install-spgw-u

   gitRepository            = 'https://github.com/OPENAIRINTERFACE/openair-cn-cups.git'
   gitDirectory             = 'openair-cn-cups'
   gitCommit                = 'develop'
   networkRealm             = 'simula.nornet'
   networkS1U_IPv4Interface = IPv4Interface('192.168.248.159/24')
   networkSGi_IPv4Interface = IPv4Interface('10.254.1.203/24')
   networkSGi_IPv4Gateway   = IPv4Address('10.254.1.1')
   networkSGi_IPv6Interface = IPv6Interface('3ffe::2/64')
   networkSGi_IPv6Gateway   = IPv6Address('3ffe::1')

   # Prepare network configurations:
   configurationSXab = configureInterface('ens4', IPv4Interface('0.0.0.0/0'))
   configurationS1U  = configureInterface('ens5', networkS1U_IPv4Interface, IPv4Address('0.0.0.0'))
   configurationSGI  = configureInterface('ens6', networkSGi_IPv4Interface, networkSGi_IPv4Gateway,
                                                  networkSGi_IPv6Interface, networkSGi_IPv6Gateway)

   # NOTE:
   # Double escaping is required for \ and " in "command" string!
   # 1. Python
   # 2. bash -c "<command>"
   # That is: $ => \$ ; \ => \\ ; " => \\\"

   commands = """\
echo \\\"###### Preparing system ###############################################\\\" && \\
echo -e \\\"{configurationSXab}\\\" | sudo tee /etc/network/interfaces.d/61-ens4 && sudo ifup ens4 || true && \\
echo -e \\\"{configurationS1U}\\\" | sudo tee /etc/network/interfaces.d/62-ens5 && sudo ifup ens5 || true && \\
echo -e \\\"{configurationSGI}\\\" | sudo tee /etc/network/interfaces.d/63-ens6 && sudo ifup ens6 || true && \\
echo \\\"###### Preparing sources ##############################################\\\" && \\
cd /home/nornetpp/src && \\
rm -rf {gitDirectory} && \\
git clone {gitRepository} {gitDirectory} && \\
cd {gitDirectory} && \\
git checkout {gitCommit} && \\
cd build/scripts && \\
echo \\\"###### Building SPGW-U ################################################\\\" && \\
./build_spgwu -I -f && \
./build_spgwu -c -V -b Debug -j
""".format(
      gitRepository     = gitRepository,
      gitDirectory      = gitDirectory,
      gitCommit         = gitCommit,
      networkRealm      = networkRealm,
      configurationSXab = configurationSXab,
      configurationS1U  = configurationS1U,
      configurationSGI  = configurationSGI
   )

   if execute(commands) == True:
      clear_flag('actions.configure-spgwu')


# ###### configure-spgwc function ###########################################
#@when('actions.configure-spgwc')
#@when('spgwccharm.installed')
def configure_spgwc():

   # ====== Install SPGW-C ==================================================
   # For a documentation of the installation procedure, see:
   # https://github.com/OPENAIRINTERFACE/openair-cn-cups/wiki/OpenAirSoftwareSupport#install-spgw-c

   gitRepository            = 'https://github.com/OPENAIRINTERFACE/openair-cn-cups.git'
   gitDirectory             = 'openair-cn-cups'
   gitCommit                = 'develop'
   networkRealm             = 'simula.nornet'
   networkS1U_IPv4Interface = IPv4Interface('192.168.248.159/24')
   networkSGi_IPv4Interface = IPv4Interface('10.254.1.203/24')
   networkSGi_IPv4Gateway   = IPv4Address('10.254.1.1')
   networkSGi_IPv6Interface = IPv6Interface('3ffe::2/64')
   networkSGi_IPv6Gateway   = IPv6Address('3ffe::1')

   # Prepare network configurations:
   configurationS11  = configureInterface('ens4', IPv4Interface('0.0.0.0/0'))
   configurationSXab = configureInterface('ens5', IPv4Interface('0.0.0.0/0'))

   # NOTE:
   # Double escaping is required for \ and " in "command" string!
   # 1. Python
   # 2. bash -c "<command>"
   # That is: $ => \$ ; \ => \\ ; " => \\\"

   commands = """\
echo \\\"###### Preparing system ###############################################\\\" && \\
echo -e \\\"{configurationS11}\\\" | sudo tee /etc/network/interfaces.d/61-ens4 && sudo ifup ens4 || true && \\
echo -e \\\"{configurationSXab}\\\" | sudo tee /etc/network/interfaces.d/62-ens5 && sudo ifup ens5 || true && \\
echo \\\"###### Preparing sources ##############################################\\\" && \\
cd /home/nornetpp/src && \\
rm -rf {gitDirectory} && \\
git clone {gitRepository} {gitDirectory} && \\
cd {gitDirectory} && \\
git checkout {gitCommit} && \\
cd build/scripts && \\
echo \\\"###### Building SPGW-C ################################################\\\" && \\
./build_spgwc -I -f && \
./build_spgwc -c -V -b Debug -j
""".format(
      gitRepository     = gitRepository,
      gitDirectory      = gitDirectory,
      gitCommit         = gitCommit,
      networkRealm      = networkRealm,
      configurationS11  = configurationS11,
      configurationSXab = configurationSXab
   )

   if execute(commands) == True:
      clear_flag('actions.configure-spgwc')


# ###########################################################################
prepare_cassandra_hss_build()
configure_cassandra()
configure_hss()

#configure_mme()

#configure_spgwu()

#configure_spgwc()
