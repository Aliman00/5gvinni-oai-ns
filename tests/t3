#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import functools
import os
import re
import shlex
import sys
import traceback
from ipaddress import IPv4Address, IPv4Interface, IPv6Address, IPv6Interface


class CalledProcessError(Exception):
   def __init__(self, returncode, cmd, output):
      self.returncode = returncode
      self.cmd        = cmd
      self.output     = output


def ssh(cmd, host, user, password=None, key=None):
    #client = get_ssh_client(host, user, password, key)

    cmds = ' '.join(cmd)
    stdin, stdout, stderr = [ b'IN', b'OUT', b'ERR' ]   # client.exec_command(cmds, get_pty=True)
    retcode = 0   #stdout.channel.recv_exit_status()
    # client.close()  # @TODO re-use connections
    if retcode > 0:
        output = stderr.strip()   # FIXME!
        raise CalledProcessError(returncode=retcode, cmd=cmd, output=output)
    return (
        stdout.decode('utf-8').strip(),
        stderr.decode('utf-8').strip()
    )

def _run(cmd, env=None):
   if isinstance(cmd, str):
      cmd = shlex.split(cmd)

   if type(cmd) is not list:
      cmd = [cmd]

   return ssh(cmd, 'HOST', 'USER', 'PASSWD', 'KEY')


# ###### Execute command ####################################################
def execute(commands):
   # stdout, stderr = charms.sshproxy._run(commands)
   return _run(commands)


commands = """ls -l && \\
pwd"""

try:
    [ stdout, stderr ] = execute(commands)
except:
    print('FAILURE')
    exc_type, exc_value, exc_traceback = sys.exc_info()
    err = traceback.format_exception(exc_type, exc_value, exc_traceback)
    print('command execution failed:' + str(err))
else:
   print('SUCCESS')
finally:
   print('finally')
