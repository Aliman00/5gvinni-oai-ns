#!/bin/bash -e
# =====================================================================
#     #######  #####          #     #   ###   #     # #     #   ###
#     #       #     #         #     #    #    ##    # ##    #    #
#     #       #               #     #    #    # #   # # #   #    #
#      #####  #  ####  #####  #     #    #    #  #  # #  #  #    #
#           # #     #          #   #     #    #   # # #   # #    #
#     #     # #     #           # #      #    #    ## #    ##    #
#      #####   #####             #      ###   #     # #     #   ###
# =====================================================================
#
# SimulaMet OpenAirInterface Evolved Packet Core VNF and NS
# Copyright (C) 2019 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


DIRECTORY="Measurement1"
DESTINATION="10.1.1.249:9000"
INTERFACE="any"
RUNTIME=20

IP_HSS="10.208.0.200"
IP_MME="10.208.0.201"
IP_SPGWC="10.208.0.202"
IP_SPGWU="10.208.0.203"
SSH_EPC="sshpass -p'osm4us' ssh -oStrictHostKeyChecking=no -J oesthorn.nntb.no,nornetpp@frigg.simula.nornet nornetpp@"


# ====== Initialise =========================================================
if [ "${SUDO_UID}:${SUDO_GID}" == ":" ] ; then
   echo >&2 "ERROR: Run this script with sudo, since it has to enable ECN and start tcpdump!"
   exit 1
fi

sudo sysctl net.ipv4.tcp_ecn=1

sudo -u#${SUDO_UID} -g#${SUDO_GID} mkdir -p ${DIRECTORY}
SUMMARY_OLD="${DIRECTORY}/results.summary"
SUMMARY_NEW="${DIRECTORY}/results.summary.new"
SUMMARY_UPDATED="${DIRECTORY}/results.summary.updated"
(
   echo "--varnames=\"TimeStamp Scenario Protocol Runtime FlowParameters\""
   echo "--resultsdirectory=${DIRECTORY}"
) >${SUMMARY_NEW}


# ====== Flow parameters ====================================================
saturatedFlow="const0:const1400"
streamingFlow="const60:const20000"   # 9.6 Mbit/s payload
maxMsgSize=1440                      # Max. 1440 bytes per SCTP message/UDP packet
tcpdumpSnaplens="64 65536"


# ====== Run measurements ===================================================
for scenario in Upload Download Bidirectional ; do   # Bidirectional
   for protocol in udp sctp ; do
      flowParameters="INVALID!"
      if [ "${protocol}" == "udp" ] ; then
         flowParameters="${streamingFlow}"
      else
         flowParameters="${saturatedFlow}"
      fi
      if [ "${scenario}" == "Bidirectional" ] ; then
          flowParameters="${flowParameters}:${flowParameters}:maxmsgsize=${maxMsgSize},sndbuf=0,rcvbuf=0"
       elif [ "${scenario}" == "Upload" ] ; then
          flowParameters="${flowParameters}:const0:const0:maxmsgsize=${maxMsgSize},sndbuf=0,rcvbuf=0"
       elif [ "${scenario}" == "Download" ] ; then
          flowParameters="const0:const0:${flowParameters}:maxmsgsize=${maxMsgSize},sndbuf=0,rcvbuf=0"
       else
          echo >&2 "ERROR: Bad scenario ${scenario}!"
          exit 1
       fi

      now=`date +%FT%H:%M:%S.%N`
      echo ""
      echo "====== ${now}: ${protocol^^}, ${flowParameters} ======"

      values="${now} ${scenario} ${protocol^^} ${RUNTIME} ${flowParameters}"
      id=`echo "${now}: ${values}" | sha256 -x`
      scalarFile="${DIRECTORY}/${id}.sca"
      scalarFileA="${DIRECTORY}/${id}-active.sca"
      scalarFileP="${DIRECTORY}/${id}-passive.sca"
      vectorFile="${DIRECTORY}/${id}.vec"
      pcapFilePrefix="${DIRECTORY}/${id}"

      (
         echo "--values=${values}"
         echo "--input=${scalarFileA}"
         echo "--values=${values}"
         echo "--input=${scalarFileP}"
      ) >>${SUMMARY_NEW}


      echo "Starting tcpdump ..."
      for tcpdumpSnaplen in ${tcpdumpSnaplens} ; do
         tcpdump -i ${INTERFACE} -w "${pcapFilePrefix}-${tcpdumpSnaplen}.pcap" -s ${tcpdumpSnaplen} -n ${protocol} or sctp or icmp or icmp6 &
      done
      sleep 3

 
      echo "Starting NetPerfMeter ..."
      sudo -u#${SUDO_UID} -g#${SUDO_GID} netperfmeter ${DESTINATION} \
         -quiet -runtime=${RUNTIME} \
         -vector="${vectorFile}" -scalar="${scalarFile}" \
         -${protocol} ${flowParameters}

      echo "Stopping tcpdump ..."
      killall tcpdump || true
      wait

      chown ${SUDO_UID}:${SUDO_GID} ${DIRECTORY}/${id}*
      find ${DIRECTORY} -name "${id}*.pcap" | xargs -r xz -T0
   done
done


# ====== Prepare results ====================================================
cat ${SUMMARY_NEW} >${SUMMARY_UPDATED}
if [ -e "${SUMMARY_OLD}" ] ; then
   grep -v ^--varnames= ${SUMMARY_OLD} | grep -v ^--resultsdirectory= >>${SUMMARY_UPDATED}
fi
mv ${SUMMARY_UPDATED} ${SUMMARY_OLD}
chown ${SUDO_UID}:${SUDO_GID} ${SUMMARY_OLD} ${SUMMARY_NEW}

sudo -u#${SUDO_UID} -g#${SUDO_GID} createsummary xy -ignore-scalar-file-errors <${SUMMARY_OLD}
